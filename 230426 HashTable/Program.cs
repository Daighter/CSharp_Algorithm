namespace _230426_HashTable
{
    internal class Program
    {
        static void Main(string[] args)
        {
        }

        /* 2. 해싱과 해시함수에 대한 조사 (해시의 원리, 해싱함수의 효율, 등)
         * 
         * <해싱>
         * 해싱이란 어떤 항목의 탐색 키만을 가지고 해시함수를 통해 정수로 변환하여
         * 그 정수를 배열의 인덱스로 설정하여 탐색과 삽입, 삭제 모두
         * O(1)만큼의 시간복잡도를 갖게하는 기법이다
         * 
         * <해시함수의 효율>
         * ★. 해시함수 자체가 느린경우 의미가 퇴색됨
         * ★. 해시함수 결과의 밀집도가 낮아야 함
         * (탐색방법 바꿔 밀집도를 풀어주거나 용량을 늘려줄 필요가 있음)
         * ★. 해시테이블의 크기가 클수록 효율이 좋음
         */

        /* 3. 해시테이블의 충돌과 충돌해결방안
         * 
         * <해시테이블 주의점 - 충돌>
         * ★. 해시함수가 서로 다른 입력 값(키)에 대해 동일한 해시테이블 주소(인덱스)를 반환하는 것
         * ★. 모든 입력 값에 대해 고유한 해시 값을 만드는 것은 불가능하며 충돌은 피할 수 없음
         * ★. 대표적인 충돌 해결방안으로 체이닝과 개방주소법이 있음
         * 
         * 체이닝은 중복되는 인덱스가 발생할 경우 연결리스트 형식으로 붙여 추가하는 형식으로
         * 노드기반을 지양하는 C#에서는 잘 쓰지 않는 편이다
         * 
         * 대신 C#에서는 개방주소법을 주로 쓰는데
         * 개방주소법은 중복되는 인덱스가 발생할 시에 탐색방법에 따라
         * 다른 인덱스로 이동 후 그 자리에 저장하는 방법이다
         */


    }
}