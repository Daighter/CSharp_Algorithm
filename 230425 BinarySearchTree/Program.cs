namespace _230425_BinarySearchTree
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, World!");
        }
    }
    /* 2. 이진탐색트리의 한계점과 극복방법 조사
     * 
     * 보통의 이진탐색트리의 경우 평균적으로 접근과 탐색, 십입, 제거 모두 O(log n) 만큼 걸리지만
     * 최악의 경우(여를 들어 추가되는 데이터의 값이 직전에 추가된 데이터 값보다 큰 상황이 연속으로 발생할 경우)
     * 한쪽으로만 계속 추가되어 Big-O 시간이 (log n)이 아닌 (n)가까이 까지 증가할 수 있다
     * 이런 경우를 대비하여 Red-Black방식을 사용하여 균형을 유지할 수 있다
     */

    /* 3. 이진탐색트리의 순회방법 조사와 순회순서
     * 
     * 이진탐색트리의 기본 순회방식은 중위순회방식을 기반으로 구동하며
     * 중위순회방식은 왼쪽 자식노드가 1순위, 기준노드가 2순위, 오른쪽 자식노드가 3순위로 구동된다
     * 뿌리노드부터 왼쪽 자식노드에 내려가고 다시 그 자식노드를 기준으로 삼고 기준이 된 자식노드의 왼쪽 자식노드로
     * 내려가는 것을 반복하다 왼쪽 자식노드가 없으면 2순위인 현재 기준노드를 출력하고 3순위인 오른쪽 자식노드로 간다
     * 여기서 또 오른쪽 자식노드에 왼쪽 자식노드가 있으면 왼쪽으로 내려가는 것을 반복한다 방식을 반복하며 진행하는것이
     * 중위순회방식이며 출력할 시에 오름차순 정렬이 가능하다
     */


}